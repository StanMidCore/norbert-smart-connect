
export class OAuthWindowManager {
  private authWindowRef: Window | null = null;
  private checkWindowInterval: NodeJS.Timeout | null = null;

  startWindowMonitoring(
    authWindow: Window, 
    provider: string, 
    onComplete: () => void,
    onToast: (toast: { title: string; description: string; variant?: 'destructive' }) => void
  ) {
    if (this.checkWindowInterval) {
      clearInterval(this.checkWindowInterval);
    }

    console.log(`üîç D√©but surveillance fen√™tre ${provider}`);
    let checkCount = 0;
    const maxChecks = 60; // 1 minute max (60 * 1000ms)

    this.checkWindowInterval = setInterval(() => {
      checkCount++;
      
      try {
        // V√©rifier si la fen√™tre est ferm√©e manuellement
        if (authWindow.closed) {
          console.log(`üîí Fen√™tre ${provider} ferm√©e manuellement`);
          this.cleanup();
          
          // Actualiser les comptes apr√®s fermeture
          setTimeout(() => {
            console.log(`üîÑ Actualisation des comptes apr√®s fermeture fen√™tre ${provider}`);
            onComplete();
          }, 1000);
          return;
        }

        // Fermeture automatique apr√®s 1 minute pour √©viter le blocage
        if (checkCount >= maxChecks) {
          console.log(`‚è∞ Fermeture automatique apr√®s 1 minute pour ${provider}`);
          authWindow.close();
          
          this.cleanup();
          
          onToast({
            title: "Fen√™tre ferm√©e automatiquement",
            description: `La fen√™tre ${provider} a √©t√© ferm√©e. Si vous avez termin√© l'autorisation, vos comptes vont √™tre actualis√©s.`,
          });
          
          // Actualiser les comptes
          setTimeout(() => {
            console.log(`üîÑ Actualisation automatique des comptes pour ${provider}`);
            onComplete();
          }, 2000);
          
          return;
        }

      } catch (error) {
        // Erreur g√©n√©rale, continuer la surveillance
        console.log(`‚ö†Ô∏è Erreur surveillance ${provider}:`, error);
      }
    }, 1000);
  }

  openAuthWindow(url: string, provider: string): Window | null {
    // Fermer la fen√™tre pr√©c√©dente si elle existe
    if (this.authWindowRef && !this.authWindowRef.closed) {
      this.authWindowRef.close();
    }
    
    // Calculer la position centr√©e
    const width = 600;
    const height = 700;
    const left = Math.max(0, Math.floor(window.screen.width / 2 - width / 2));
    const top = Math.max(0, Math.floor(window.screen.height / 2 - height / 2));
    
    // Ouvrir dans une nouvelle fen√™tre popup
    const authWindow = window.open(
      url,
      `oauth-${provider}-${Date.now()}`,
      `width=${width},height=${height},left=${left},top=${top},scrollbars=yes,resizable=yes,toolbar=no,menubar=no,location=no,status=no,directories=no`
    );
    
    if (authWindow) {
      this.authWindowRef = authWindow;
      authWindow.focus();
    }
    
    return authWindow;
  }

  cleanup() {
    if (this.checkWindowInterval) {
      clearInterval(this.checkWindowInterval);
      this.checkWindowInterval = null;
    }
    if (this.authWindowRef && !this.authWindowRef.closed) {
      this.authWindowRef.close();
    }
    this.authWindowRef = null;
  }
}
