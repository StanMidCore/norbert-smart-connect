
export interface ToastFunction {
  (toast: { title: string; description: string; variant?: 'destructive' }): void;
}

export class WindowMonitor {
  private checkWindowInterval: NodeJS.Timeout | null = null;
  private messageListener: ((event: MessageEvent) => void) | null = null;
  private closeListener: ((event: Event) => void) | null = null;
  private readonly MAX_CHECKS = 30; // 30 secondes

  startMonitoring(
    authWindow: Window,
    provider: string,
    onComplete: () => void,
    onToast: ToastFunction
  ): void {
    if (this.checkWindowInterval) {
      clearInterval(this.checkWindowInterval);
    }

    // Nettoyer les anciens listeners
    if (this.messageListener) {
      window.removeEventListener('message', this.messageListener);
    }

    console.log(`üîç D√©but surveillance fen√™tre ${provider}`);
    let checkCount = 0;
    let connectionDetected = false;

    // √âcouter les messages de la popup OAuth
    this.messageListener = (event: MessageEvent) => {
      console.log('üì® Message re√ßu de la popup:', event.data);
      
      if (event.data?.type === 'oauth-callback') {
        const { connection, provider: callbackProvider, success } = event.data;
        
        if (callbackProvider === provider) {
          console.log(`üéØ Callback OAuth re√ßu pour ${provider}:`, { connection, success });
          connectionDetected = true;
          
          // Nettoyer la surveillance
          this.cleanup();
          
          // Fermer la fen√™tre si elle n'est pas d√©j√† ferm√©e
          if (authWindow && !authWindow.closed) {
            try {
              authWindow.close();
            } catch (e) {
              console.log('Fen√™tre d√©j√† ferm√©e');
            }
          }
          
          if (success) {
            onToast({
              title: "Connexion r√©ussie",
              description: `Votre compte ${provider} a √©t√© connect√© avec succ√®s`,
            });
          } else {
            onToast({
              title: "√âchec de la connexion",
              description: `Impossible de connecter votre compte ${provider}`,
              variant: "destructive",
            });
          }

          // Toujours actualiser les comptes apr√®s un callback
          setTimeout(() => {
            console.log(`üîÑ Actualisation des comptes apr√®s callback ${provider}`);
            onComplete();
          }, 1000);
        }
      } else if (event.data?.type === 'oauth-manual-close') {
        // Gestion explicite de la fermeture manuelle
        console.log(`üîí Fermeture manuelle d√©tect√©e pour ${provider}`);
        connectionDetected = true;
        this.cleanup();
        
        // Actualiser apr√®s fermeture manuelle
        setTimeout(() => {
          console.log(`üîÑ Actualisation apr√®s fermeture manuelle ${provider}`);
          onComplete();
        }, 1500);
      }
    };

    // Ajouter l'√©couteur de messages
    window.addEventListener('message', this.messageListener);

    // Surveillance traditionnelle de la fen√™tre avec v√©rification plus fr√©quente
    const checkWindow = () => {
      checkCount++;
      
      try {
        // V√©rifier si la fen√™tre est ferm√©e manuellement
        if (authWindow.closed) {
          console.log(`üîí Fen√™tre ${provider} ferm√©e`);
          this.cleanup();
          
          // Si pas de callback d√©tect√©, forcer la synchronisation
          if (!connectionDetected) {
            console.log(`üîÑ Force synchronisation apr√®s fermeture ${provider}`);
            setTimeout(() => {
              onComplete();
            }, 1000);
          }
          return;
        }

        // Fermeture automatique apr√®s 30 secondes
        if (checkCount >= this.MAX_CHECKS) {
          console.log(`‚è∞ Fermeture automatique apr√®s 30 secondes pour ${provider}`);
          
          try {
            authWindow.close();
          } catch (e) {
            console.log('Erreur fermeture automatique:', e);
          }
          
          this.cleanup();
          
          // Toujours actualiser apr√®s timeout
          setTimeout(() => {
            console.log(`üîÑ Actualisation automatique apr√®s timeout ${provider}`);
            onComplete();
          }, 1000);
          
          return;
        }

        // Programmer la prochaine v√©rification (toutes les 500ms pour plus de r√©activit√©)
        if (checkCount < this.MAX_CHECKS) {
          this.checkWindowInterval = setTimeout(checkWindow, 500);
        }

      } catch (error) {
        console.log(`‚ö†Ô∏è Erreur surveillance ${provider}:`, error);
        if (checkCount < this.MAX_CHECKS && !connectionDetected) {
          this.checkWindowInterval = setTimeout(checkWindow, 500);
        }
      }
    };

    // D√©marrer la surveillance imm√©diatement
    this.checkWindowInterval = setTimeout(checkWindow, 500);
  }

  cleanup(): void {
    if (this.checkWindowInterval) {
      clearTimeout(this.checkWindowInterval);
      this.checkWindowInterval = null;
    }
    
    if (this.messageListener) {
      window.removeEventListener('message', this.messageListener);
      this.messageListener = null;
    }

    if (this.closeListener) {
      window.removeEventListener('beforeunload', this.closeListener);
      this.closeListener = null;
    }
  }
}
